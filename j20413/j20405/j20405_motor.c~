#include <stdio.h>
#include <stdlib.h>
#include <wiringPi.h>
#include <wiringPiI2C.h>

// PWMユニットのI2Cアドレス
#define PWMI2CADR 0x40

// モータードライバの各入力が接続されているPWMユニットのチャネル番号

// 右側のモーター：パワーユニットのK1またはK2に接続（説明書は誤り）
// ENAはPWM駆動に使う（1でブリッジ動作、0はブリッジオフ）
// IN1とIN2は右車輪の回転方向を決める（後進：0,1、前進：1,0）（0,0 と1,1 はブレーキ）
#define ENA_PWM 8
#define IN1_PWM 9
#define IN2_PWM 10

// 左側のモーター：パワーユニットのK3またはK4に接続（説明書は誤り）
// ENBはPWM駆動に使う（1でブリッジ動作、0はブリッジオフ）
// IN3とIN4は左車輪の回転方向を決める（後進：0,1、前進：1,0）（0,0 と1,1 はブレーキ）
#define ENB_PWM 13
#define IN3_PWM 11
#define IN4_PWM 12

// PWMモジュールのレジスタ番号
#define PWM_MODE1 0
#define PWM_MODE2 1
#define PWM_SUBADR1 2
#define PWM_SUBADR2 3
#define PWM_SUBADR3 4
#define PWM_ALLCALL 5

// PWM番号×4+PWM_0_??_? でレジスタ番号は求ま
#define PWM_0_ON_L 6
#define PWM_0_ON_H 7
#define PWM_0_OFF_L 8
#define PWM_0_OFF_H 9

// PWM出力定数
#define PWMFULLON 16
#define PWMFULLOFF 0

// プリスケーラのレジスタ番号
// PWM周波数を決めるレジスタ番号、100Hzなら61をセット
#define PWM_PRESCALE 254

int set_pwm_output(int fd, int pwmch, int outval)
// motor_drive( )から呼ばれる関数、PWMユニットへの書き込みをやっています
//直接、他から呼び出す必要はないと思われますが、必要ならどうぞ
{
  int ef = 0;
  int regno;
  if ((pwmch < 0) || (pwmch > 15)) ef = 1;// チャネルの指定違反チェック
  if ((outval < 0) || (outval > 16)) ef = ef + 2;// 出力値の指定違反チェック
  if (ef == 0){
    regno = PWM_0_ON_L + pwmch * 4; // 1chあたり4レジスタで16ch分あるので
    if (outval == 16){
      wiringPiI2CWriteReg8(fd,regno+3,0);
      wiringPiI2CWriteReg8(fd,regno+1,0x10);
    } else {
      wiringPiI2CWriteReg8(fd,regno+1,0);
      wiringPiI2CWriteReg8(fd,regno+3,outval);
    }
  }
  return ef;// エラーがなければ0が返る
}

int motor_dirve(int fd, int lm, int rm)
// モーターを制御するための関数
// fdはI2C初期化時のファイルディスクプリタ（デバイス番号のようなもの）
// lmは左モーター、rmは右モーターの駆動数値で、-16～+16 の範囲で指定
// 負の場合は後方向に回転、正の場合は前方向に回転
// 絶対値が大きいほど、パワーが大きくなる
// PWMユニット自体は12ビット精度だが、上位4ビット分を制御
// あまり細かく制御しても、ロボカーの動きとしては大差ないと考えられるため
// 必要と思うなら、自分でマニュアルを見てプログラムを書いて下さい
{
  set_pwm_output(fd, ENA_PWM, 0);    // Right motor disable
  set_pwm_output(fd, ENB_PWM, 0);    // Left motor disable
  // Right motor PWM control
  if (rm < 0){;
    set_pwm_output(fd, IN1_PWM, 0);    // OUT1->GND;
    set_pwm_output(fd, IN2_PWM, 16); // OUT2->+Vs
    rm = abs(rm);
  } else {
    set_pwm_output(fd, IN1_PWM, 16); // OUT1->+Vs
    set_pwm_output(fd, IN2_PWM, 0);    // OUT2->GND}
  }
  // Left motor PWM control
  if (lm < 0){
    set_pwm_output(fd, IN3_PWM, 0);    // OUT3->GND
    set_pwm_output(fd, IN4_PWM, 16); // OUT4->+Vs
    lm = abs(lm);
  } else {
    set_pwm_output(fd, IN3_PWM, 16); // OUT3->+Vs
    set_pwm_output(fd, IN4_PWM, 0);    // OUT4->GND
  }
  if (lm > 16) lm = 16;
  if (rm > 16) rm = 16;
  set_pwm_output(fd, ENA_PWM, rm);    // Right motor PWM start
  set_pwm_output(fd, ENB_PWM, lm);    // Left motor PWM start
  return 0;// 戻り値は常に0
}

int motor_init(){
  int fd;
  wiringPiSetupGpio(); /* BCM_GPIOピン番号で指定*/
  fd = wiringPiI2CSetup(PWMI2CADR); // このfdがファイルディスクプリタ 
  if (fd < 0){
    printf("I2Cの初期化に失敗しました。終了します。¥n");
    exit(EXIT_FAILURE);
  }
  wiringPiI2CWriteReg8(fd,PWM_PRESCALE,61);    //PWM周期10msに設定             
  wiringPiI2CWriteReg8(fd,PWM_MODE1,0x10);    //SLEEPmode                      
  wiringPiI2CWriteReg8(fd,PWM_MODE1,0);   //NORMALmode                         
  delay(1); // wait for stabilizing internal oscillator                        
  wiringPiI2CWriteReg8(fd,PWM_MODE1,0x80);    //Restart all PWM ch             
  return fd;
}




int main(){
  int fd;
  int sc=0;
    
  while(1){
    scanf("%d",&sc);
    
    if(sc>16 || sc<-16){
      motor_dirve(fd, 0, 0);
      break;
    }
    motor_dirve(fd, sc, sc);

  }
  return 0;
  
}
